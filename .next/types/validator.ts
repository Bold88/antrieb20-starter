// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
}


// Validate ../../src/app/about/page.tsx
{
  const handler = {} as typeof import("../../src/app/about/page.js")
  handler satisfies AppPageConfig<"/about">
}

// Validate ../../src/app/agb/page.tsx
{
  const handler = {} as typeof import("../../src/app/agb/page.js")
  handler satisfies AppPageConfig<"/agb">
}

// Validate ../../src/app/city/[city]/page.tsx
{
  const handler = {} as typeof import("../../src/app/city/[city]/page.js")
  handler satisfies AppPageConfig<"/city/[city]">
}

// Validate ../../src/app/contact/page.tsx
{
  const handler = {} as typeof import("../../src/app/contact/page.js")
  handler satisfies AppPageConfig<"/contact">
}

// Validate ../../src/app/cookies/page.tsx
{
  const handler = {} as typeof import("../../src/app/cookies/page.js")
  handler satisfies AppPageConfig<"/cookies">
}

// Validate ../../src/app/datenschutz/page.tsx
{
  const handler = {} as typeof import("../../src/app/datenschutz/page.js")
  handler satisfies AppPageConfig<"/datenschutz">
}

// Validate ../../src/app/impressum/page.tsx
{
  const handler = {} as typeof import("../../src/app/impressum/page.js")
  handler satisfies AppPageConfig<"/impressum">
}

// Validate ../../src/app/page.tsx
{
  const handler = {} as typeof import("../../src/app/page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ../../src/app/pdf-form/agb/page.tsx
{
  const handler = {} as typeof import("../../src/app/pdf-form/agb/page.js")
  handler satisfies AppPageConfig<"/pdf-form/agb">
}

// Validate ../../src/app/pdf-form/page.tsx
{
  const handler = {} as typeof import("../../src/app/pdf-form/page.js")
  handler satisfies AppPageConfig<"/pdf-form">
}

// Validate ../../src/app/referenzen/page.tsx
{
  const handler = {} as typeof import("../../src/app/referenzen/page.js")
  handler satisfies AppPageConfig<"/referenzen">
}

// Validate ../../src/app/services/[slug]/page.tsx
{
  const handler = {} as typeof import("../../src/app/services/[slug]/page.js")
  handler satisfies AppPageConfig<"/services/[slug]">
}

// Validate ../../src/app/services/page.tsx
{
  const handler = {} as typeof import("../../src/app/services/page.js")
  handler satisfies AppPageConfig<"/services">
}

// Validate ../../src/app/api/lead/route.ts
{
  const handler = {} as typeof import("../../src/app/api/lead/route.js")
  handler satisfies RouteHandlerConfig<"/api/lead">
}

// Validate ../../src/app/api/send-mail/route.ts
{
  const handler = {} as typeof import("../../src/app/api/send-mail/route.js")
  handler satisfies RouteHandlerConfig<"/api/send-mail">
}





// Validate ../../src/app/layout.tsx
{
  const handler = {} as typeof import("../../src/app/layout.js")
  handler satisfies LayoutConfig<"/">
}
